require_relative '../ios-privacy-fix.rb'
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}
ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']
platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false
prepare_react_native_project!

target 'LifeCompass' do
  use_expo_modules!
  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end
  config = use_native_modules!(config_command)
  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    # Apply privacy manifest fix
    fix_privacy_manifests(installer) if defined?(fix_privacy_manifests)
    
    # Standard React Native post-install
    react_native_post_install(installer, config[:reactNativePath], :mac_catalyst_enabled => false)
    
    # Fix for script errors and header search paths
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Ensure we have valid build settings
        config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] ||= ''
        # Add PrivacyInfo.xcprivacy to excluded files
        config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] << ' PrivacyInfo.xcprivacy'
        
        # Fix for EXConstants - disable its script execution
        if target.name == 'EXConstants'
          puts "Disabling EXConstants script execution"
          # Prevent any script execution in this target
          config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'YES'
          config.build_settings['USER_SCRIPT_SANDBOXING_OUTBOUND_NETWORK_ACCESS'] = 'DISALLOW'
          config.build_settings['USER_SCRIPT_SANDBOXING_SCOPE'] = 'SYSTEM'
        else
          # Other targets can run scripts normally
          config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
        end
        
        # Fix header search paths
        config.build_settings['HEADER_SEARCH_PATHS'] ||= '$(inherited)'
        config.build_settings['HEADER_SEARCH_PATHS'] << ' $(PODS_ROOT)/Headers/Private/React-bridging'
        
        # Fix deployment target issues
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
        
        # Ensure Swift version is set properly
        config.build_settings['SWIFT_VERSION'] = '5.0'
      end
      
      # For EXConstants, try to disable or modify the script phases
      if target.name == 'EXConstants'
        puts "Modifying EXConstants build phases"
        target.build_phases.each do |build_phase|
          if build_phase.respond_to?(:name) && build_phase.name && build_phase.name.include?('Generate app.config')
            puts "Found problematic script phase: #{build_phase.name}"
            
            # Option 1: Try to disable the script phase
            if build_phase.respond_to?(:shell_script=)
              puts "Replacing script content with exit 0"
              build_phase.shell_script = "#!/bin/sh\nexit 0"
            end
            
            # Option 2: If we can't modify it directly, try to set a property
            if build_phase.respond_to?(:[]=)
              puts "Setting shell_script to exit 0"
              build_phase['shell_script'] = "#!/bin/sh\nexit 0"
            end
          end
        end
      end
    end
  end
end

